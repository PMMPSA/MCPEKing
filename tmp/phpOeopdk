name: ChatDefender
main: falkirks\chatdefender\ChatDefender
version: 1.1.1
author: Falkirks
api: [1.6.0]
load: POSTWORLD
permissions:
 chatdefender:
  default: op
  description: ChatDefender top level
  children:
   chatdefender.exempt:
    default: op
    description: Exempt from all blocks
    children:
      chatdefender.exempt.similar:
        default: op
        description: Exempt from similarity checking
      chatdefender.exempt.rate:
        default: op
        description: Exempt from rate limit
<?php
namespace falkirks\chatdefender;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerChatEvent;
use pocketmine\event\player\PlayerCommandPreprocessEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;

class ChatDefender extends PluginBase implements Listener{
    /** @var  ChatSession[] */
    public $sessions;
    public function onEnable(){
        $this->saveDefaultConfig();
        $this->getServer()->getPluginManager()->registerEvents($this, $this);
        $this->s = [];
    }
    public function onChat(PlayerChatEvent $event){
        if(!isset($this->sessions[$event->getPlayer()->getName()])){
            $this->sessions[$event->getPlayer()->getName()] = new ChatSession($this);
            $this->sessions[$event->getPlayer()->getName()]->bindToPlayer($event->getPlayer());
        }
        if(!$this->sessions[$event->getPlayer()->getName()]->sendMessage($event->getMessage())){
            $event->setCancelled();
        }
    }
    public function onQuit(PlayerQuitEvent $event){
        if(isset($this->sessions[$event->getPlayer()->getName()])) unset($this->sessions[$event->getPlayer()->getName()]);
    }
    public function onCommandPreProcess(PlayerCommandPreprocessEvent $event){
        if($this->getConfig()->get("blockme") && isset($this->sessions[$event->getPlayer()->getName()]) && $this->sessions[$event->getPlayer()->getName()]->isBlocked()){
            $args = explode(" ", $event->getMessage());
            if($args[0] == "/me"){
                $event->setCancelled();
            }
        }
    }
}
similarity: 1
  # Required similarity of messages to be considered spam
  # Uses similar_text()
ratelimit: 1
  # Mininum time between messages for them to be considered spam
  # if it is 1 then messages sent 1 second apart or less will be spam
blockme: true
  # Block usage of /me by blocked players
baseblocklength: 60
  # Block length in seconds
  # Will increase with repeated blocks<?php
namespace falkirks\chatdefender;
use pocketmine\Player;
use pocketmine\scheduler\PluginTask;

class ChatSession extends PluginTask{
    private $state;
    private $m;
    private $blockLength;
    /** @var  Player */
    private $player;
    public function bindToPlayer(Player $player){
        $this->player = $player;
        $this->blockLength = 1;
        $this->state = 0;
    }
    public function sendMessage($message){
        if($this->state == 2){
            $this->player->sendMessage("[ChatDefender] You are currently blocked.");
            return false;
        }
        elseif($this->similarityCheck($message) || $this->rateCheck()){
            if($this->state == 1){
                $this->state = 2;
                $this->player->sendMessage("[ChatDefender] You have been blocked for " . $this->blockLength * $this->getOwner()->getConfig()->get("baseblocklength") . "second(s)");
                $this->getOwner()->getServer()->getScheduler()->scheduleDelayedTask($this, 20*$this->getOwner()->getConfig()->get("baseblocklength")*$this->blockLength);
                $this->blockLength++;
                return false;
            }
            else{
                $this->state = 1;
                $this->player->sendMessage("[ChatDefender] Looks like you are posting spammy stuff. Continuing to do so will result in a block.");
                $this->m = array($message, time());
                return false;
            }
        }
        else{
            $this->m = array($message, time());
            return true;
        }
    }
    public function onRun($tick){
        $this->state = 0;
        $this->player->sendMessage("[ChatDefender] Your block has been lifted.");
    }
    public function similarityCheck($message){
        if($this->player->hasPermission("chatdefender.exempt.similar")) return false;
        return ((strlen($message) - similar_text($this->m[0],$message)) <= $this->getOwner()->getConfig()->get("similarity"));
    }
    public function rateCheck(){
        if($this->player->hasPermission("chatdefender.exempt.rate")) return false;
        return ((time() - $this->m[1]) <= $this->getOwner()->getConfig()->get("ratelimit"));
    }
    public function isBlocked(){
        return $this->state === 2;
    }
}