<?php
//= cmd:/worldprotect,Main_Commands
//: Main WorldProtect command
//> usage: /worldprotect  _[world]_ _<subcmd>_ _[options]_
//= cfg:features
//: This section you can enable/disable modules.
//: You do this in order to avoid conflicts between different
//: PocketMine-MP plugins.  It has one line per feature:
//:
//:     feature: true|false
//:
//: If **true** the feature is enabled.  if **false** the feature is disabled.
//:
namespace aliuly\worldprotect;

use pocketmine\command\CommandSender;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;
use pocketmine\level\Level;
use pocketmine\event\level\LevelLoadEvent;
use pocketmine\event\level\LevelUnloadEvent;
use pocketmine\event\Listener;
use pocketmine\Player;
use aliuly\worldprotect\common\mc;
use aliuly\worldprotect\common\MPMU;
use aliuly\worldprotect\common\BasicPlugin;

class Main extends BasicPlugin implements CommandExecutor,Listener {
	protected $wcfg;
	const SPAM_DELAY = 5;

	public function onEnable() {
		if (!is_dir($this->getDataFolder())) mkdir($this->getDataFolder());
		mc::plugin_init($this,$this->getFile());
		$cfg = $this->modConfig(__NAMESPACE__, [
			"max-players" => [ "MaxPlayerMgr", false ],
			"protect" => [ "WpProtectMgr", true ],
			"border" => [ "WpBordersMgr", true ],
			"pvp" => [ "WpPvpMgr", true ],
			"motd" => [ "WpMotdMgr", false ],
			"no-explode" => [ "NoExplodeMgr", false ],
			"unbreakable" => [ "Unbreakable", false ],
			"bancmds" => [ "BanCmd" , false ],
			"banitem" => [ "BanItem", true ],
			"gamemode" => [ "GmMgr", false ],
			"gm-save-inv" => [ "GmSaveInv", false ],
		], [
			"version" => $this->getDescription()->getVersion(),
			"motd" => WpMotdMgr::defaults(),
		],mc::_("/%s [world] %s %s"));
		$this->modules[] = new WpList($this);

		// Make sure that loaded worlds are inded loaded...
		foreach ($this->getServer()->getLevels() as $lv) {
			$this->loadCfg($lv);
		}
		$this->getServer()->getPluginManager()->registerEvents($this, $this);

	}

	//////////////////////////////////////////////////////////////////////
	//
	// Save/Load configurations
	//
	//////////////////////////////////////////////////////////////////////
	public function loadCfg($world) {

		if ($world instanceof Level) $world = $world->getName();
		if (isset($this->wcfg[$world])) return true; // world is already loaded!
		if (!$this->getServer()->isLevelGenerated($world)) return false;
		if (!$this->getServer()->isLevelLoaded($world)) {
			$path = $this->getServer()->getDataPath()."worlds/".$world."/";
		} else {
			$level = $this->getServer()->getLevelByName($world);
			if (!$level) return false;
			$path = $level->getProvider()->getPath();
		}
		$path .= "wpcfg.yml";
		if (is_file($path)) {
			$this->wcfg[$world] = (new Config($path,Config::YAML,[]))->getAll();
			foreach ($this->modules as $i=>$mod) {
				if (!($mod instanceof BaseWp)) continue;
				if (isset($this->wcfg[$world][$i])) {
					$mod->setCfg($world,$this->wcfg[$world][$i]);
				} else {
					$mod->unsetCfg($world);
				}
			}
		} else {
			$this->wcfg[$world] = [];
			foreach ($this->modules as $i=>$mod) {
				if (!($mod instanceof BaseWp)) continue;
				$mod->unsetCfg($world);
			}
		}
		return true;
	}
	public function saveCfg($world) {

		if ($world instanceof Level) $world = $world->getName();
		if (!isset($this->wcfg[$world])) return false; // Nothing to save!
		if (!$this->getServer()->isLevelGenerated($world)) return false;
		if (!$this->getServer()->isLevelLoaded($world)) {
			$path = $this->getServer()->getDataPath()."worlds/".$world."/";
		} else {
			$level = $this->getServer()->getLevelByName($world);
			if (!$level) return false;
			$path = $level->getProvider()->getPath();
		}
		$path .= "wpcfg.yml";
		if (count($this->wcfg[$world])) {
			$yaml = new Config($path,Config::YAML,[]);
			$yaml->setAll($this->wcfg[$world]);
			$yaml->save();
		} else {
			unlink($path);
		}
		return true;
	}
	public function unloadCfg($world) {

		if ($world instanceof Level) $world = $world->getName();
		if (isset($this->wcfg[$world])) unset($this->wcfg[$world]);
		foreach ($this->modules as $i=>$mod) {
			if (!($mod instanceof BaseWp)) continue;
			$mod->unsetCfg($world);
		}
	}
	public function getCfg($world,$key,$default) {
		if ($world instanceof Level) $world = $world->getName();
		if ($this->getServer()->isLevelLoaded($world))
			$unload = false;
		else {
			$unload = true;
			if (!$this->loadCfg($world)) return $default;
		}
		if (isset($this->wcfg[$world]) && isset($this->wcfg[$world][$key])) {
			$res = $this->wcfg[$world][$key];
		} else {
			$res = $default;
		}
		if ($unload) $this->unloadCfg($world);
		return $res;
	}
	public function setCfg($world,$key,$value) {
		if ($world instanceof Level) $world = $world->getName();
		if ($this->getServer()->isLevelLoaded($world))
			$unload = false;
		else {
			$unload = true;
			if (!$this->loadCfg($world)) return false;
		}
		if (!isset($this->wcfg[$world]) || !isset($this->wcfg[$world][$key]) ||
			 $value !== $this->wcfg[$world][$key]) {
			if (!isset($this->wcfg[$world])) $this->wcfg[$world] = [];
			$this->wcfg[$world][$key] = $value;
			$this->saveCfg($world);
		}
		if (isset($this->modules[$key])
			 && ($this->modules[$key] instanceof BaseWp))
			$this->modules[$key]->setCfg($world,$value);
		if ($unload) $this->unloadCfg($world);
		return true;
	}
	public function unsetCfg($world,$key) {
		if ($world instanceof Level) $world = $world->getName();
		if ($this->getServer()->isLevelLoaded($world))
			$unload = false;
		else {
			$unload = true;
			if (!$this->loadCfg($world)) return false;
		}
		if (isset($this->wcfg[$world])) {
			if (isset($this->wcfg[$world][$key])) {
				unset($this->wcfg[$world][$key]);
				$this->saveCfg($world);
			}
		}
		if (isset($this->modules[$key])
			 && ($this->modules[$key] instanceof BaseWp))
			$this->modules[$key]->unsetCfg($world);
		if ($unload) $this->unloadCfg($world);
	}

	//////////////////////////////////////////////////////////////////////
	//
	// Event handlers
	//
	//////////////////////////////////////////////////////////////////////
	public function onLevelLoad(LevelLoadEvent $e) {
		$this->loadCfg($e->getLevel());
	}
	public function onLevelUnload(LevelUnloadEvent $e) {
		$this->unloadCfg($e->getLevel());
	}

	//////////////////////////////////////////////////////////////////////
	//
	// Command dispatcher
	//
	//////////////////////////////////////////////////////////////////////
	public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) {
		if ($cmd->getName() != "worldprotect") return false;
		if ($sender instanceof Player) {
			$world = $sender->getLevel()->getName();
		} else {
			$level = $this->getServer()->getDefaultLevel();
			if ($level) {
				$world = $level->getName();
			} else {
				$world = null;
			}
		}
		if (isset($args[0]) && $this->getServer()->isLevelGenerated($args[0])) {
			$world = array_shift($args);
		}
		if ($world === null) {
			$sender->sendMessage(mc::_("[WP] Must specify a world"));
			return false;
		}
		if (!$this->isAuth($sender,$world)) return true;
		return $this->dispatchSCmd($sender,$cmd,$args,$world);
	}
	public function canPlaceBreakBlock(Player $c,$world) {
		$pname = strtolower($c->getName());
		if (isset($this->wcfg[$world]["auth"])
			 && count($this->wcfg[$world]["auth"])) {
			// Check if user is in auth list...
			if (isset($this->wcfg[$world]["auth"][$pname])) return true;
			return false;
		}
		if ($c->hasPermission("wp.cmd.protect.auth")) return true;
		return false;
	}

	public function isAuth($c,$world) {
		if (!($c instanceof Player)) return true;
		if (!isset($this->wcfg[$world])) return true;
		if (!isset($this->wcfg[$world]["auth"])) return true;
		if (!count($this->wcfg[$world]["auth"])) return true;

		$iusr = strtolower($c->getName());
		if (isset($this->wcfg[$world][$iusr])) return true;
		$c->sendMessage(mc::_("[WP] You are not allowed to do this"));
		return false;
	}
	public function authAdd($world,$usr) {
		$auth = $this->getCfg($world,"auth",[]);
		if (isset($auth[$usr])) return;
		$auth[$usr] = $usr;
		$this->setCfg($world,"auth",$auth);
	}
	public function authCheck($world,$usr) {
		$auth = $this->getCfg($world,"auth",[]);
		return isset($auth[$usr]);
	}
	public function authRm($world,$usr) {
		$auth = $this->getCfg($world,"auth",[]);
		if (!isset($auth[$usr])) return;
		unset($auth[$usr]);
		if (count($auth)) {
			$this->setCfg($world,"auth",$auth);
		} else {
			$this->unsetCfg($world,"auth");
		}
	}
	public function msg($pl,$txt) {
		if (MPMU::apiVersion("1.12.0")) {
			$pl->sendTip($txt);
			return;
		}
		list($time,$otxt)= $this->getState("spam",$pl,[0,""]);
		if (time() - $time < self::SPAM_DELAY && $otxt == $txt) return;
		$this->setState("spam",$pl,[time(),$txt]);
		$pl->sendMessage($txt);
	}
	/**
	 * @API
	 */
	public function getMaxPlayers($world){
		if (isset($this->modules["max-players"]))
			return $this->modules["max-players"]->getMaxPlayers($world);
		return null;
	}
}
<?php
namespace aliuly\worldprotect\common;

use pocketmine\plugin\PluginBase;
use pocketmine\command\CommandSender;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\utils\TextFormat;
use pocketmine\utils\Config;

use aliuly\worldprotect\common\mc;
use aliuly\worldprotect\common\BasicHelp;
use aliuly\worldprotect\common\Session;
use aliuly\worldprotect\common\SubCommandMap;

/**
 * Simple extension to the PocketMine PluginBase class
 */
abstract class BasicPlugin extends PluginBase {
	protected $modules = [];
	protected $scmdMap = null;
	protected $session;

	/**
	 * Given some defaults, this will load optional features
	 *
	 * @param str $ns - namespace used to search for classes to load
	 * @param array $mods - optional module definition
	 * @param array $defaults - default options to use for config.yml
	 * @param str $xhlp - optional help format.
	 * @return array
	 */
	protected function modConfig($ns,$mods,$defaults,$xhlp="") {
		if (!isset($defaults["features"])) $defaults["features"] = [];
		foreach ($mods as $i => $j) {
			$defaults["features"][$i] = $j[1];
		}
		$cfg=(new Config($this->getDataFolder()."config.yml",
									  Config::YAML,$defaults))->getAll();
		$this->modules = [];
		foreach ($cfg["features"] as $i=>$j) {
			if (!isset($mods[$i])) {
				$this->getLogger()->info(mc::_("Unknown feature \"%1%\" ignored.",$i));
				continue;
			}
			if (!$j) continue;
			$class = $mods[$i][0];
			if (is_array($class)) {
				while (count($class) > 1) {
					// All classes before the last one are dependencies...
					$classname = $dep = array_shift($class);
					if(strpos($classname,"\\") === false) $classname = $ns."\\".$classname;
					if (isset($this->modules[$dep])) continue; // Dependancy already loaded
					if(isset($cfg[strtolower($dep)])) {
						$this->modules[$dep] = new $classname($this,$cfg[strtolower($dep)]);
					} else {
						$this->modules[$dep] = new $classname($this);
					}
				}
				// The last class in the array implements the actual feature
				$class = array_shift($class);
			}
			if(strpos($class,"\\") === false) $class = $ns."\\".$class;
			if (isset($cfg[$i]))
				$this->modules[$i] = new $class($this,$cfg[$i]);
			else
				$this->modules[$i] = new $class($this);
		}
		$c = count($this->modules);
		if ($c == 0) {
			$this->getLogger()->info(mc::_("NO features enabled"));
			return;
		}
		$this->session = null;
		$this->getLogger()->info(mc::n(mc::_("Enabled one feature"),
													 mc::_("Enabled %1% features",$c),
													 $c));
		if ($this->scmdMap !== null && $this->scmdMap->getCommandCount() > 0) {
			$this->modules[] = new BasicHelp($this,$xhlp);
		}
		return $cfg;
	}
  /**
	 * Get module
	 * @param str $module - module to retrieve
	 * @return mixed|null
	 */
	public function getModule($str) {
		if (isset($this->modules[$str])) return $this->modules[$str];
		return null;
	}
	/**
	 * Save a config section to the plugins' config.yml
	 *
	 * @param str $key - section to save
	 * @param mixed $settings - settings to save
	 */
	public function cfgSave($key,$settings) {
		$cfg=new Config($this->getDataFolder()."config.yml",Config::YAML);
		$dat = $cfg->getAll();
		$dat[$key] = $settings;
		$cfg->setAll($dat);
		$cfg->save();
	}
	/**
	 * Dispatch commands using sub command table
	 */
	protected function dispatchSCmd(CommandSender $sender,Command $cmd,array $args,$data=null) {
		if ($this->scmdMap === null) {
			$sender->sendMessage(mc::_("No sub-commands available"));
			return false;
		}
		return $this->scmdMap->dispatchSCmd($sender,$cmd,$args,$data);
	}
	/** Look-up sub command map
	 * @returns SubCommandMap
	 */
	public function getSCmdMap() {
		return $this->scmdMap;
	}
	/**
	 * Register a sub command
	 * @param str $cmd - sub command
	 * @param callable $callable - callable to execute
	 * @param array $opts - additional options
	 */
	public function registerSCmd($cmd,$callable,$opts) {
		if ($this->scmdMap === null) {
			$this->scmdMap = new SubCommandMap();
		}
		$this->scmdMap->registerSCmd($cmd,$callable,$opts);
	}
	/**
	 * Get a player state for the desired module/$label.
	 *
	 * @param str $label - state variable to get
	 * @param Player|str $player - Player instance or name
	 * @param mixed $default - default value to return is no state found
	 * @return mixed
	 */
	public function getState($label,$player,$default) {
		if ($this->session === null) return $default;
		return $this->session->getState($label,$player,$default);
	}
	/**
	 * Set a player related state
	 *
	 * @param str $label - state variable to set
	 * @param Player|str $player - player instance or their name
	 * @param mixed $val - value to set
	 * @return mixed
	 */
	public function setState($label,$player,$val) {
		if ($this->session === null) $this->session = new Session($this);
		return $this->session->setState($label,$player,$val);
	}
	/**
	 * Clears a player related state
	 *
	 * @param str $label - state variable to clear
	 * @param Player|str $player - intance of Player or their name
	 */
	public function unsetState($label,$player) {
		if ($this->session === null) return;
		$this->session->unsetState($label,$player);
	}

	/**
	 * Gets the contents of an embedded resource on the plugin file.
	 *
	 * @param string $filename
	 * @return string|null
	 */
	public function getResourceContents($filename){
		$fp = $this->getResource($filename);
		if($fp === null){
			return null;
		}
		$contents = stream_get_contents($fp);
		fclose($fp);
		return $contents;
	}
	/**
	 * Lets you dump the messages.ini file
	 */
	 public function getMessagesIni(){
		 return $this->getResourceContents("messages/messages.ini");
	 }
}
